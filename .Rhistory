install.packages('devtools')
devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
vehicles.1997 <- vehicles(vehicles$year==1997)
library(fueleconomy)
View(vehicles)
vehicles.1997 <- vehicles(vehicles$year==1997)
vehicles.1997 <- vehicles[vehicles$year==1997]
unique(vehicles.1997$year)
vehicles.1997 <- vehicles[vehicles$year==1997,]
unique(vehicles.1997$year)
two.wheel.drive.vehicles <- vehicles[vehicles$drive == '2-Wheel Drive' & vehicles$cty > 20,]
library(dplyr)
library("dplyr"")
# You should have have access to the `vehicles` data.frame
# Create a data.frame of vehicles from 1997
# Use the `unique` function to verify that there is only 1 value in the `year` column of your new data.frame
# Create a data.frame of 2-Wheel Drive vehicles that get more than 20 miles/gallon in the city
# Of those vehicles, what is the vehicle ID of the vehicle with the worst hwy mpg?
# Write a function that takes a `year` and a `make` as parameters, and returns
# The vehicle that gets the most hwy miles/gallon of vehicles of that make in that year
# What was the most efficient honda model of 1995?
install.packages(dplyr)
install.packages('dplyr')
install.packages("dplyr")
install.packages('dplyr')
install.packages("dplyr")
install.packages("dplyr")
library("ggplot2")
install.packages("ggplot2")
library("dplyr")
library("ggplot2")
?diamonds
diamonds.sample <- sample_n(diamonds)
diamonds.sample <- sample_n(diamonds, 1000)
View(diamonds.sample)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
## retrieves survey doc content
source('./scripts/esha-chart.R')
source('./scripts/isabel-summary.R')
source('./scripts/nikhila-chart.R')
source('./scripts/sue-chart.R')
intro.survey <- read.csv('data/intro-survey.csv', stringsAsFactors = FALSE)
setwd("~/")
df <- read.csv(read.csv('17hfs.consumption.csv', stringsAsFactors = FALSE))
df <- read.csv('17hfs.consumption.csv', stringsAsFactors = FALSE)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
df <- read.csv('17hfsconsumption.csv', stringsAsFactors = FALSE)
View(df)
new.df <- df %>% group_by(Location) %>%
summarize("total_spent" = sum(Charge))
new.df <- df %>% group_by(df$Location) %>%
summarize("total_spent" = sum(df$Charge))
dataset <- intro.survey
GenerateSurveySummary <- function(dataset) {
summary.data <- dataset
colnames(summary.data) <- c("class", "in_informatics", "OS", "cmd_exp", "git_exp", "mkd_exp",
"R_exp", "code_exp", "visited_countries","in_state", "siblings",
"height", "pet_pref", "seahawks_fan")
summary.list <- list()
summary.list$length <- length(summary.data)
}
summary.data <- dataset
colnames(summary.data) <- c("class", "in_informatics", "OS", "cmd_exp", "git_exp", "mkd_exp",
"R_exp", "code_exp", "visited_countries","in_state", "siblings",
"height", "pet_pref", "seahawks_fan")
summary.list <- list()
summary.list$length <- length(summary.data)
View(summary.data)
library(dplyr)
summary.list$code_exp <- summary.data$code_exp %>% filter(startsWith("Moderate"))
summary.list$code_exp <- summary.data$code_exp %>% startsWith("Moderate")
summary.list$code_exp <- summary.data$code_exp %>% filter(startsWith("Moderate"))
summary.list$code_exp <- summary.data$code_exp %>% group_by(code_exp) %>%
summarize(Experience = n())
summary.list$code_exp <- summary.data$code_exp %>% summarize(Experience = n())
summary.list$code_exp <- summary.data$code_exp %>% summarize("Experience" = n())
View(intro.survey)
summary.list$code_exp <- c(nrow(grep("^Experimented", summary.data$code_exp, value = TRUE),
grep("^Moderate", summary.data$code_exp, value = TRUE),
grep("^Lots", summary.data$code_exp, value = TRUE)))
summary.list$code_exp <- c(nrow(grep("^Experimented", summary.data$code_exp, value = TRUE)),
nrow(grep("^Moderate", summary.data$code_exp, value = TRUE)),
nrow(grep("^Lots", summary.data$code_exp, value = TRUE)))
summary.list$code_exp <- c(nrow(grep("^Experimented", summary.data$code_exp, value = TRUE)),
nrow(grep("^Moderate", summary.data$code_exp, value = TRUE)),
nrow(grep("^Lots", summary.data$code_exp, value = TRUE)))
test <- c(nrow(grep("^Experimented", summary.data$code_exp, value = TRUE)),
nrow(grep("^Moderate", summary.data$code_exp, value = TRUE)),
nrow(grep("^Lots", summary.data$code_exp, value = TRUE)))
test2 <- grep("^Experimented", summary.data$code_exp, value = TRUE)
test2 <- nrow(grep("^Experimented", summary.data$code_exp, value = TRUE))
test2 <- grep("^Experimented", summary.data$code_exp, value = TRUE)
test2 <- length(grep("^Experimented", summary.data$code_exp, value = TRUE))
summary.list$code_exp <- c(length(grep("^Experimented", summary.data$code_exp, value = TRUE)),
length(grep("^Moderate", summary.data$code_exp, value = TRUE)),
length(grep("^Lots", summary.data$code_exp, value = TRUE)))
summary.list$code_exp <- CountRowsByStart(summary.data$code_exp, "Experimented", "Lots", "Moderate")
CountRowsByStart <- function(col.name, param1, param2, param3) {
return(c(length(grep(paste0("^", param1), col.name, value = TRUE)),
length(grep(paste0("^", param2), col.name, value = TRUE)),
length(grep(paste0("^", param3), col.name, value = TRUE))))
}
summary.list$code_exp <- CountRowsByStart(summary.data$code_exp, "Experimented", "Lots", "Moderate")
summary.list$code_exp <- CountRowsByStart(summary.data$code_exp, "Experimented", "Lots", "Moderate")
summary.list$code_exp <- CountRowsByStart(summary.data$code_exp, "Experimented", "Moderate", "Lots")
summary.list$cmd_exp <- CountRowsByStart(summary.data$git_exp, "Never", "Have", "Intermediate", "Expert")
CountRowsByStart <- function(col.name, param1, param2, param3, param4) {
if (missing(param2) && missing(param3) && missing(param4)) {
return(c(length(grep(paste0("^", param1), col.name, value = TRUE))))
} else if (missing(param3) && missing(param4)) {
return(c(length(grep(paste0("^", param1), col.name, value = TRUE)),
length(grep(paste0("^", param2), col.name, value = TRUE))))
} else if (missing(param4)) {
return(c(length(grep(paste0("^", param1), col.name, value = TRUE)),
length(grep(paste0("^", param2), col.name, value = TRUE)),
length(grep(paste0("^", param3), col.name, value = TRUE))))
} else {
return(c(length(grep(paste0("^", param1), col.name, value = TRUE)),
length(grep(paste0("^", param2), col.name, value = TRUE)),
length(grep(paste0("^", param3), col.name, value = TRUE)),
length(grep(paste0("^", param4), col.name, value = TRUE))))
}
}
summary.list$cmd_exp <- CountRowsByStart(summary.data$git_exp, "Never", "Have", "Intermediate", "Expert")
summary.list$responses <- nrows(summary.data)
summary.list$responses <- nrow(summary.data)
summary.list$cmd_exp <- CountRowsByStart(summary.data$cmd_exp, "Never", "Have", "Intermediate", "Expert")
summary.list$git_exp <- CountRowsByStart(summary.data$git_exp, "Never", "Have", "Intermediate", "Expert")
summary.list$R_exp <- CountRowsByStart(summary.data$R_exp, "Never", "Have", "Intermediate", "Expert")
summary.list$operating_system <- CountRowsByStart(summary.data$OS, "Mac", "Windows", "Linux", "Other")
summary.list$code_exp_labels <- c("Experimented", "Moderate", "Lots")
summary.list$cmd_exp_labels <- c("Never", "Have", "Intermediate", "Expert")
summary.list$code_exp_labels <- c("Experimented", "Moderate", "Lots")
summary.list$cmd_exp_labels <- c("Never", "Have", "Intermediate", "Expert")
summary.list$git_exp_labels <- c("Never", "Have", "Intermediate", "Expert")
summary.list$R_exp_labels <- c("Never", "Have", "Intermediate", "Expert")
summary.list$operating_system <- c("Mac", "Windows", "Linux", "Other")
summary.list$operating_system_labels <- c("Mac", "Windows", "Linux", "Other")
summary.list$operating_system <- CountRowsByStart(summary.data$OS, "Mac", "Windows", "Linux", "Other")
summary.list$interest_informatics <- CountRowsByStart(summary.data$in_informatics, "Yes", "No", "Maybe", "N/A")
summary.list$markdown_exp <- CountRowsByStart(summary.data$mkd_exp, "Never", "Have", "Intermediate", "Expert")
summary.list$markdown_exp <- c("Never", "Have", "Intermediate", "Expert")
summary.list$markdown_exp_labels <- c("Never", "Have", "Intermediate", "Expert")
summary.list$code_exp <- CountRowsByStart(summary.data$code_exp, "Experimented", "Moderate", "Lots")
summary.list$commmand_prompt_exp <- CountRowsByStart(summary.data$cmd_exp, "Never", "Have", "Intermediate", "Expert")
summary.list$git_exp <- CountRowsByStart(summary.data$git_exp, "Never", "Have", "Intermediate", "Expert")
summary.list$R_exp <- CountRowsByStart(summary.data$R_exp, "Never", "Have", "Intermediate", "Expert")
summary.list$markdown_exp <- CountRowsByStart(summary.data$mkd_exp, "Never", "Have", "Intermediate", "Expert")
summary.list$operating_system <- CountRowsByStart(summary.data$OS, "Mac", "Windows", "Linux", "Other")
summary.list$interest_informatics <- CountRowsByStart(summary.data$in_informatics, "Yes", "No", "Maybe", "N/A")
# adds labels so user can understand meaning of values
summary.list$code_exp_labels <- c("Experimented", "Moderate", "Lots")
summary.list$cmd_exp_labels <- c("Never", "Have", "Intermediate", "Expert")
summary.list$git_exp_labels <- c("Never", "Have", "Intermediate", "Expert")
summary.list$R_exp_labels <- c("Never", "Have", "Intermediate", "Expert")
summary.list$operating_system_labels <- c("Mac", "Windows", "Linux", "Other")
summary.list$interest_informatics_labels <- c("Yes", "No", "Maybe", "N/A")
summary.list$markdown_exp_labels <- c("Never", "Have", "Intermediate", "Expert")
summary.list$class_standing <- CountRowsByStart(summary.data$class, "Freshman", "Sophomore", "Junior", "Senior")
summary.list$class_standing_labels <- c("Freshman", "Sophomore", "Junior", "Senior")
summary.list$code_exp <- CountRowsByStart(summary.data$code_exp, "Experimented", "Moderate", "Lots")
summary.list$commmand_prompt_exp <- CountRowsByStart(summary.data$cmd_exp, "Never", "Have", "Intermediate", "Expert")
summary.list$git_exp <- CountRowsByStart(summary.data$git_exp, "Never", "Have", "Intermediate", "Expert")
summary.list$R_exp <- CountRowsByStart(summary.data$R_exp, "Never", "Have", "Intermediate", "Expert")
summary.list$markdown_exp <- CountRowsByStart(summary.data$mkd_exp, "Never", "Have", "Intermediate", "Expert")
summary.list$operating_system <- CountRowsByStart(summary.data$OS, "Mac", "Windows", "Linux", "Other")
summary.list$interest_informatics <- CountRowsByStart(summary.data$in_informatics, "Yes", "No", "Maybe", "N/A")
summary.list$class_standing <- CountRowsByStart(summary.data$class, "Freshman", "Sophomore", "Junior", "Senior")
# adds labels so user can understand meaning of values
summary.list$labels_code_exp <- c("Experimented", "Moderate", "Lots")
summary.list$labels_cmd_exp <- c("Never", "Have", "Intermediate", "Expert")
summary.list$labels_git_exp <- c("Never", "Have", "Intermediate", "Expert")
summary.list$labels_R_exp <- c("Never", "Have", "Intermediate", "Expert")
summary.list$labels_operating_system <- c("Mac", "Windows", "Linux", "Other")
summary.list$labels_interest_informatics <- c("Yes", "No", "Maybe", "N/A")
summary.list$labels_markdown_exp <- c("Never", "Have", "Intermediate", "Expert")
summary.list$labels_class_standing <- c("Freshman", "Sophomore", "Junior", "Senior")
library(dplyr)
GenerateSurveySummary <- function(dataset) {
# copies dataset to maintain original
summary.data <- dataset
# reformat data for ease of access
colnames(summary.data) <- c("class", "in_informatics", "OS", "cmd_exp", "git_exp", "mkd_exp",
"R_exp", "code_exp", "visited_countries","in_state", "siblings",
"height", "pet_pref", "seahawks_fan")
# creates list
summary.list <- list()
summary.list$length <- length(summary.data)
summary.list$responses <- nrow(summary.data)
# adds information about tech related info to list
summary.list$code_exp <- CountRowsByStart(summary.data$code_exp, "Experimented", "Moderate", "Lots")
summary.list$commmand_prompt_exp <- CountRowsByStart(summary.data$cmd_exp, "Never", "Have", "Intermediate", "Expert")
summary.list$git_exp <- CountRowsByStart(summary.data$git_exp, "Never", "Have", "Intermediate", "Expert")
summary.list$R_exp <- CountRowsByStart(summary.data$R_exp, "Never", "Have", "Intermediate", "Expert")
summary.list$markdown_exp <- CountRowsByStart(summary.data$mkd_exp, "Never", "Have", "Intermediate", "Expert")
summary.list$operating_system <- CountRowsByStart(summary.data$OS, "Mac", "Windows", "Linux", "Other")
summary.list$interest_informatics <- CountRowsByStart(summary.data$in_informatics, "Yes", "No", "Maybe", "N/A")
summary.list$class_standing <- CountRowsByStart(summary.data$class, "Freshman", "Sophomore", "Junior", "Senior")
# adds labels so user can understand meaning of values
summary.list$labels_code_exp <- c("Experimented", "Moderate", "Lots")
summary.list$labels_cmd_exp <- c("Never", "Have", "Intermediate", "Expert")
summary.list$labels_git_exp <- c("Never", "Have", "Intermediate", "Expert")
summary.list$labels_R_exp <- c("Never", "Have", "Intermediate", "Expert")
summary.list$labels_operating_system <- c("Mac", "Windows", "Linux", "Other")
summary.list$labels_interest_informatics <- c("Yes", "No", "Maybe", "N/A")
summary.list$labels_markdown_exp <- c("Never", "Have", "Intermediate", "Expert")
summary.list$labels_class_standing <- c("Freshman", "Sophomore", "Junior", "Senior")
return(summary.list)
}
# Returns a collection of values sorted based on whether row values
# in the given column start with the given parameters
CountRowsByStart <- function(col.name, param1, param2, param3, param4) {
if (missing(param2) && missing(param3) && missing(param4)) {
return(c(length(grep(paste0("^", param1), col.name, value = TRUE))))
} else if (missing(param3) && missing(param4)) {
return(c(length(grep(paste0("^", param1), col.name, value = TRUE)),
length(grep(paste0("^", param2), col.name, value = TRUE))))
} else if (missing(param4)) {
return(c(length(grep(paste0("^", param1), col.name, value = TRUE)),
length(grep(paste0("^", param2), col.name, value = TRUE)),
length(grep(paste0("^", param3), col.name, value = TRUE))))
} else {
return(c(length(grep(paste0("^", param1), col.name, value = TRUE)),
length(grep(paste0("^", param2), col.name, value = TRUE)),
length(grep(paste0("^", param3), col.name, value = TRUE)),
length(grep(paste0("^", param4), col.name, value = TRUE))))
}
}
View(GenerateSurveySummary)
View(CountRowsByStart)
source('./scripts/isabel-summary.R')
summary.list <- GenerateSurveySummary(intro.survey)
intro.survey <- read.csv('data/intro-survey.csv', stringsAsFactors = FALSE)
summary.list <- GenerateSurveySummary(intro.survey)
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
## retrieves survey doc content
source('./scripts/esha-chart.R')
source('./scripts/isabel-summary.R')
source('./scripts/nikhila-chart.R')
source('./scripts/sue-chart.R')
```
# INFO 201 Introduction Survey - Spring 2017
```{r summary, echo=FALSE, message=FALSE}
## retrieves dataset
intro.survey <- read.csv('data/intro-survey.csv', stringsAsFactors = FALSE)
summary.list <- GenerateSurveySummary(intro.survey)
```
## Summary
`r GenerateSummary(intro.survey)`
## Charts
test <- summary.list$code_exp[1]
install.packages("streamR")
library(streamR)
install.packages(‘RCurl’, ‘XML’)
install.packages("RCurl")
install.packages("RCurl")
install.packages("XML")
library(streamR)
library(rgeos)
library(rgdal)
library(httr)
library(dplyr)
install.packages("rgeos")
install.packages("rgdal")
library(streamR)
library(rgeos)
library(rgdal)
library(httr)
library(dplyr)
findLatLong <- function(geog_data, city) {
do.call(rbind.data.frame, mapply(function(x, y) {
geog_data %>% filter (city == x, state == y)
}, city, state, SIMPLIFY = FALSE))
}
findGeoData <- function() {
try({
GET("http://www.mapcruzin.com/fcc-wireless-shapefiles/cities-towns.zip",
write_disk("cities.zip"))
unzip("cities.zip", exdir="cities") })
shape.file <- readOGR("cities/citiesx020.shp", "citiesx020")
geo.data <-
gCentroid(shp, byid = TRUE) %>%
data.frame() %>%
rename(lon = x, lat = y) %>%
mutate(city = shp@data$NAME, state = shp@data$STATE)
return(geo.data)
}
geo_data <- findGeoData()
geo_data <- findGeoData()
findLatLong <- function(geog_data, city) {
do.call(rbind.data.frame, mapply(function(x, y) {
geog_data %>% filter (city == x, state == y)
}, city, state, SIMPLIFY = FALSE))
}
findGeoData <- function() {
try({
GET("http://www.mapcruzin.com/fcc-wireless-shapefiles/cities-towns.zip",
write_disk("cities.zip"))
unzip("cities.zip", exdir="cities") })
shp <- readOGR("cities/citiesx020.shp", "citiesx020")
geo.data <-
gCentroid(shp, byid = TRUE) %>%
data.frame() %>%
rename(lon = x, lat = y) %>%
mutate(city = shp@data$NAME, state = shp@data$STATE)
return(geo.data)
}
geo_data <- findGeoData()
lat.long.df2 <- findLatLong("Portland", "ME")
lat.long.df2 <- findLatLong("Portland", "OR")
findLatLong <- function(geo_db, city, state) {
do.call(rbind.data.frame, mapply(function(x, y) {
geo_db %>% filter(city==x, state==y)
}, city, state, SIMPLIFY=FALSE))
}
lat.long.df2 <- findLatLong("Portland", "ME")
lat.long.df2 <- geo_data %>% findLatLong("Portland", "ME")
View(lat.long.df2)
View(lat.long.df2)
lat.long.df2[1,]
lat.long.df2[,1]
lat.long.df2[,2]
call_service(key = fromJSON("key.JSON")$weather-key)
library(jsonlite)
call_service(key = fromJSON("key.JSON")$weather-key)
weather.params <- list(key = key, latitude = curr.lat, longitude = curr.long)
key <- Sys.getenv("weather-key")
weather.params <- list(key = key, latitude = curr.lat, longitude = curr.long)
curr.lat <- lat.long.df[,2]
key <- Sys.getenv("weather-key")
key <- Sys.getenv("weather-key")
key <- Sys.getenv("WEATHER_KEY")
key <- Sys.getenv("WEATHER_KEY")
test <- Sys.getenv("R_USER")
setwd("~/UW/sp2017/INFO201/Assignments/a5-report-hollowsunsets")
setwd("~/UW/sp2017/INFO201/twitter-weather")
test <- Sys.getenv("R_USER")
key <- Sys.getenv("WEATHER_KEY")
